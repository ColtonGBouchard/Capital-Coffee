@model PagedList.IPagedList<CapitalCoffee.Data.Models.Shop>
@using PagedList.Mvc;
@using PagedList;

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Home Page";
}

<div id="container">
    <div id="map">

    </div>

    <div id="shopList">
        <div id="shopListHeader">
            <form method="get" action="@Url.Action("Index")">
                <input type="search" name="searchTerm" class="editText" autocomplete="off"/>
                <label for="mySubmit" class="btn btn-info"><span class="glyphicon glyphicon-search"></span></label>
                <input id="mySubmit" type="submit" class="hidden"/>
                <a href="@Url.Action("Create", "Shop")" class="pull-right btn btn-info">
                   <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> 
                </a>

                Sort: @Html.ActionLink("Rating", "Index", "Home", new { sortTerm = "rating" }, null) |
                @Html.ActionLink("Alphabetical", "Index", "Home", new { sortTerm = "alphabetical" }, null)
            </form>
        </div>
        <div class="pagedList" data-pt-target="#shopList" id="shopPagedList">
            @foreach(var shop in Model)
            {   
                <div id="singleShop">
                <h3>@Html.ActionLink(@shop.Name, "Details", "Shop", new { id = @shop.ShopId }, null)</h3>
                @if(@shop.AverageRating == null)
                {
                    <h5>This shop has not been reviewed yet.</h5>
                }
                else 
                { 
                    <h5>Average Rating: @shop.AverageRating</h5>
                }
                <h5>@shop.Address1, @shop.Address2 @shop.City, @shop.State @shop.Zip</h5>   
                </div>
            }
        </div>

        <div id="pager" class="col-md-6 col-md-offset-4">
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page }), PagedListRenderOptions.MinimalWithItemCountText)
        </div>
    </div>
</div>


<script>
    var locations = [];

    @foreach(var shop in Model)
    {
        @:locations.push(['@shop.Name','@shop.Address1','@shop.City','@shop.State', '@shop.Zip'])
    }

    function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 12,
            center: new google.maps.LatLng(-34.397, 150.644),
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        var infowindow = new google.maps.InfoWindow();
        var geocoder = new google.maps.Geocoder();

        var marker, i;

        for (i = 0; i < locations.length; i++) {
            geocodeAddress(locations[i]);
        }


        function geocodeAddress(location) {
            geocoder.geocode({ 'address': location[1] + location[2] + location[4]}, function (results, status) {
                //alert(status);
                if (status == google.maps.GeocoderStatus.OK) {

                    //alert(results[0].geometry.location);
                    map.setCenter(results[0].geometry.location);
                    createMarker(results[0].geometry.location, location[0] + "<br>" + location[1]);
                }
                else {
                    alert("some problem in geocode" + status);
                }
            });
        }

        function createMarker(latlng, html) {
            var marker = new google.maps.Marker({
                position: latlng,
                map: map
            });

            google.maps.event.addListener(marker, 'mouseover', function () {
                infowindow.setContent(html);
                infowindow.open(map, marker);
            });

            google.maps.event.addListener(marker, 'mouseout', function () {
                infowindow.close();
            });
        }
    }
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAnWvX5ojfzQy6HOobhbn8mO5bxJggVl54&callback=initMap"
        type="text/javascript"></script>